{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "containerName": {
            "type": "string",
            "defaultValue": "datalakestore",
            "metadata": {
                "description": "Specifies the name of the blob container."
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Specifies the location in which the Azure Storage resources should be deployed."
            }
        },
        "datamartserverAdminLogin": {
            "type": "string",
            "defaultValue": "sqladmin",
            "minLength": 1
        },
        "datamartserverAdminLoginPassword": {
            "type": "securestring",
			"metadata": {
				"description": "Suggestion for nonprod Abcdef1234."
			}
        },
        "sqlDBName": {
            "type": "string",
            "defaultValue": "DataMart",
            "metadata": {
                "description": "The name of the SQL Database."
            }
        },
        "tenant": {
            "type": "string",
			"metadata": {
				"description": "TenantID will auto-populate from subscription().tenantId."
			},
            "defaultValue": "[subscription().tenantId]"
        },
		"objectId": {
			"type": "string",
			"metadata": {
				"description": "Required for creating access policy. Specifies the object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. Get it by using Get-AzADUser or Get-AzADServicePrincipal cmdlets or in portal https://docs.microsoft.com/en-us/azure/marketplace/find-tenant-object-id#find-user-object-id. Else try  https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview"
			},
			"defaultValue": ""
		},
        "networkAcls": {
            "type": "object",
            "defaultValue": {
                "defaultAction": "allow",
                "bypass": "AzureServices",
                "ipRules": [],
                "virtualNetworkRules": []
            }
        }
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2021-06-01",
            "name": "[variables('datastorename')]",
            "tags": {
                "Department ": "Finance",
                "Environment ": "Development"
            },
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard_LRS"
            },
            "kind": "StorageV2",
            "properties": {
                "accessTier": "Hot",
                "isHnsEnabled": true
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2021-06-01",
            "name": "[format('{0}/default/{1}', variables('datastorename'), parameters('containerName'))]",
            "tags": {
                "Department ": "Finance",
                "Environment ": "Development"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('datastorename'))]"
            ]
        },
        {
            "name": "[variables('datamartserverName')]",
            "type": "Microsoft.Sql/servers",
            "location": "[parameters('location')]",
            "apiVersion": "2021-02-01-preview",
            "tags": {
                "Department ": "Finance",
                "Environment ": "Development"
            },
            "properties": {
                "administratorLogin": "[parameters('datamartserverAdminLogin')]",
                "administratorLoginPassword": "[parameters('datamartserverAdminLoginPassword')]"
            },
            "resources": [
                {
                    "name": "AllowAllWindowsAzureIps",
                    "type": "firewallrules",
                    "location": "[parameters('location')]",
                    "apiVersion": "2021-02-01-preview",
                    "dependsOn": [
                        "[concat('Microsoft.Sql/servers/', variables('datamartserverName'))]"
                    ],
                    "properties": {
                        "startIpAddress": "0.0.0.0",
                        "endIpAddress": "0.0.0.0"
                    }
                }
            ],
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
                ]
        },
        {
            "name": "[format('{0}/{1}', variables('datamartserverName'), parameters('sqlDBName'))]",
            "type": "Microsoft.Sql/servers/databases",
            "apiVersion": "2021-02-01-preview",
            "location": "[parameters('location')]",
            "tags": {
                "Department ": "Finance",
                "Environment ": "Development"
            },
            "sku": {
                "name": "S0",
                "tier": "Standard"
            },
            "dependsOn": [
                "[concat('Microsoft.Sql/servers/', variables('datamartserverName'))]"
            ],
            "properties": {
                "collation": "SQL_Latin1_General_CP1_CI_AS",
                "maxSizeBytes": 21474836480,
                "zoneRedundant": false,
                "readScale": "Disabled",
                "highAvailabilityReplicaCount": 0,
                "requestedBackupStorageRedundancy": "Geo",
                "isLedgerOn": false
            }
        },
        {
            "name": "[variables('keyvaultname')]",
            "type": "Microsoft.KeyVault/vaults",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "tags": {
                "Department ": "Finance",
                "Environment ": "Development"
            },
            "dependsOn": ["[resourceId('Microsoft.DataFactory/factories', variables('datafactoryname'))]"],
            "properties": {
                "enabledForDeployment": true,
                "enabledForTemplateDeployment": true,
                "enabledForDiskEncryption": true,
                "networkAcls": "[parameters('networkAcls')]",
                "tenantId": "[parameters('tenant')]",
                "accessPolicies": [
                    {
                        "tenantId": "[parameters('tenant')]",
                        "objectId": "[reference(resourceId('Microsoft.DataFactory/factories', variables('datafactoryname')),'2018-06-01', 'full').identity.principalId]",
                        "permissions": {
                            "keys": [],
                            "secrets": [
                                "Get",
                                "List"
                            ],
                            "certificates": []
                        }
                    },
                    {
                        "tenantId": "[parameters('tenant')]",
                        "objectId": "[parameters('objectId')]",
                        "permissions": {
                            "keys": [
                                "Get",
                                "List",
                                "Update",
                                "Create",
                                "Import",
                                "Delete",
                                "Recover",
                                "Backup",
                                "Restore"
                            ],
                            "secrets": [
                                "Get",
                                "List",
                                "Set",
                                "Delete",
                                "Recover",
                                "Backup",
                                "Restore"
                            ],
                            "certificates": [
                                "Get",
                                "List",
                                "Update",
                                "Create",
                                "Import",
                                "Delete",
                                "Recover",
                                "Backup",
                                "Restore",
                                "ManageContacts",
                                "ManageIssuers",
                                "GetIssuers",
                                "ListIssuers",
                                "SetIssuers",
                                "DeleteIssuers"
                            ]
                        }
                    }
                ],
                "sku": {
                    "name": "standard",
                    "family": "A"
                }
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "apiVersion": "2021-11-01-preview",
            "name": "[format('{0}/{1}', variables('keyvaultname'), parameters('datamartserverAdminLogin'))]",
            "properties": {
                "value": "[parameters('datamartserverAdminLoginPassword')]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyvaultname'))]"
            ]
        },
        {
            "name": "[variables('datafactoryname')]",
            "type": "Microsoft.DataFactory/factories",
            "apiVersion": "2018-06-01",
            "properties": {},
            "dependsOn": [],
            "location": "[parameters('location')]",
            "tags": {
                "Department ": "Finance",
                "Environment ": "Development"
            },
            "identity": {
                "type": "SystemAssigned"
            }
        }
    ],
    "variables": {
        "datamartserverName": "[concat('datamartserver', uniqueString(resourceGroup().id))]",
        "keyvaultname": "[concat('vault', uniqueString(resourceGroup().id))]",
        "datastorename": "[concat('datastore', uniqueString(resourceGroup().id))]",
        "datafactoryname": "[concat('factory', uniqueString(resourceGroup().id))]"
        //"uniqueResourceNameBase": "[uniqueString(resourceGroup().id, parameters('location'), deployment().name)]"
    }
}
